@using company.Common
@model BrandClaimsAnalysisModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
    <head>
        <title>Brand claims analysis</title>
        <style>
            body {
                font-family: Arial,Helvetica, sans-serif;
                font-size: 12px;
                
            }
             .title {
                 font-size: 16px;
                 font-weight: bold;
             }
             .monthheader {
                 border: 1px solid black;
                 background-color: #D0d0d0;
                 font-weight: bold;
                 text-align: center;
             }
             .header2 {
                 border: 1px solid black;
                 text-align: center;
             }
             .header1 
             { 
                 font-weight: bold;
             }
             .number {
                 text-align: right;
             }
             .table {
                 border-collapse: collapse;
                 border: 1px solid black;
             }
             td {
                 border: 1px solid black;
                 padding: 3px;
             }
             .altrow {
                 background-color: #C0C0C0;
             }
        </style>
    </head>
    <body>
        @foreach (var brand in Model.Brands) 
        { 
            <div>
                <div class="title">@brand.brandname accepted product claims - last 6 months</div>
            </div>
            <div>sorted by highest claims to sales rate</div>
            
            var salesLast = Model.ProductSalesLast[brand.brand_id];
            var salesPrevious = Model.ProductSalesPrevious[brand.brand_id];
            var returns = Model.Returns[brand.brand_id];

            var customersSalesLast = salesLast.GroupBy(s => s.customer_code).Select(g => g.Key).OrderBy(g => g).ToList();
            var customersSalesPrevious = salesPrevious.GroupBy(s => s.customer_code).Select(g => g.Key).OrderBy(g => g).ToList();
            var customersReturnsLast = returns.Where(r => r.request_date >= Model.Periods.LastPeriodStart).
                            GroupBy(r => new { r.client_id, r.Client.customer_code }).Select(g => g.Key.customer_code).OrderBy(g => g).ToList();
            var customersReturnsPrevious = returns.Where(r => r.request_date < Model.Periods.LastPeriodStart).GroupBy(r => new { r.client_id, r.Client.customer_code }).Select(g => g.Key.customer_code).OrderBy(g => g).ToList();
            var reasonsReturnsLast = returns.Where(r => r.request_date >= Model.Periods.LastPeriodStart).GroupBy(r => r.reason).Select(g => g.Key).OrderBy(g => g).ToList();
            var reasonsReturnsPrevious = returns.Where(r => r.request_date < Model.Periods.LastPeriodStart).GroupBy(r => r.reason).Select(g => g.Key).OrderBy(g => g).ToList();

            var customersSalesLastCount = Model.ShowDetails ? customersSalesLast.Count : 0;
            var customersReturnsLastCount = Model.ShowDetails ? customersReturnsLast.Count : 0;
            var reasonsReturnsLastCount = Model.ShowDetails ? reasonsReturnsLast.Count : 0;
            

            <table class="table">
                <tr>
                    <td colspan="2"></td>
                    <td class="monthheader" colspan="@(2+customersSalesLastCount + 1 + customersReturnsLastCount + reasonsReturnsLastCount+1)">
                        LAST 6 MONTHS
                    </td>
                    <td></td>
                    <td></td>
                    @*<td class="monthheader" colspan="@(2+customersSalesPrevious.Count + 1 + customersReturns.Count + reasonsReturns.Count+1)">
                            PREVIOUS 6 MONTHS
                        </td>*@
                </tr>
                <tr>
                    <td colspan="2"></td>
                    <td class="header2" colspan="@(2+customersSalesLastCount)">SALES</td>
                    <td class="header2" colspan="@(1+customersReturnsLastCount+reasonsReturnsLastCount+1)">CLAIMS</td>
                    <td></td>
                    <td></td>
                    @*<td class="header2" colspan="@(2+customersSalesPrevious.Count)">SALES</td>
                        <td class="header2" colspan="@(1+customersReturns.Count+reasonsReturns.Count+1)">CLAIMS</td>*@
                </tr>
                <tr class="header1">
                    @*<td>Id</td>*@
                    <td>Code</td>
                    <td>Description</td>
                    <td class="number">Shipped units</td>
                    @for (int i = 0; i < customersSalesLastCount; i++)
                    {
                        <td class="number">@customersSalesLast[i]</td>
                    }

                    <td>shipped value</td>
                    <td>claimed units</td>

                    @for (int i = 0; i < customersReturnsLastCount; i++)
                    {
                        <td class="number">@customersReturnsLast[i]</td>
                    }
                    @for (int i = 0; i < reasonsReturnsLastCount; i++)
                    {
                        <td class="number">@Model.ReturnCategories.FirstOrDefault(c => c.category_code == reasonsReturnsLast[i]).IfNotNull(c => c.category_name)</td>
                    }
                    <td class="number">Total claim value</td>
                    <td class="number">claims/sales value %</td>
                    <td class="number">claims/sales units %</td>
                    <td class="number">weeks over @Model.LowThresholdPercent % </td>
                    @*<td></td>
                        <td>Shipped units</td>
                        @foreach (var c in customersSalesPrevious)
                        {
                            <td>@c</td>
                        }
                        <td>shipped value</td>
                        <td>claimed units</td>
                        @foreach (var c in customersReturns)
                        {
                            <td>@c</td>
                        }
                        @foreach (var r in reasonsReturns)
                        {
                            <td>@Model.ReturnCategories.FirstOrDefault(c => c.category_code == r).IfNotNull(c => c.category_name)</td>
                        }
                        <td>claimed value</td>
                        <td>claimes/sales %</td>*@
                </tr>
                <tr>
                    <td colspan="2" style="font-weight: bold">
                        Products with 100 or more units shipped in last 6 months
                    </td>
                    <td colspan="@(2+customersSalesLastCount)"></td>
                    <td colspan="@(1+customersReturnsLastCount+reasonsReturnsLastCount+1)"></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
                @{
                    var returnProductsCustomersLast = returns.Where(r => r.request_date >= Model.Periods.LastPeriodStart).GroupBy(r => new { r.cprod_id, r.client_id, r.Client.customer_code }).Select(g => new { g.Key.cprod_id, g.Key.client_id, g.Key.customer_code, Qty = g.Sum(r => r.return_qty), Value = g.Sum(r => r.TotalValue) }).ToList();
                    var returnProductsReasonsLast = returns.Where(r => r.request_date >= Model.Periods.LastPeriodStart).GroupBy(r => new { r.cprod_id, r.reason }).Select(g => new { g.Key.cprod_id, g.Key.reason, Qty = g.Sum(r => r.return_qty), Value = g.Sum(r => r.TotalValue) }).ToList();

                    var returnProductsCustomersPrevious = returns.Where(r => r.request_date < Model.Periods.LastPeriodStart).GroupBy(r => new { r.cprod_id, r.client_id, r.Client.customer_code }).Select(g => new { g.Key.cprod_id, g.Key.client_id, g.Key.customer_code, Qty = g.Sum(r => r.return_qty), Value = g.Sum(r => r.TotalValue) }).ToList();
                    var returnProductsReasonsPrevious = returns.Where(r => r.request_date < Model.Periods.LastPeriodStart).GroupBy(r => new { r.cprod_id, r.reason }).Select(g => new { g.Key.cprod_id, g.Key.reason, Qty = g.Sum(r => r.return_qty), Value = g.Sum(r => r.TotalValue) }).ToList();

                    var products = salesLast.Select(s => new { s.cprod_id, s.cprod_code, s.cprod_name }).Union(salesPrevious.Select(s => new { s.cprod_id, s.cprod_code, s.cprod_name })).Distinct();

                    var productsTotals = products.Select(p => new
                    {
                        p.cprod_id,
                        p.cprod_code,
                        p.cprod_name,
                        SalesValueLast = salesLast.Where(s => s.cprod_id == p.cprod_id).Sum(s => s.Amount),
                        SalesUnitsLast = salesLast.Where(s => s.cprod_id == p.cprod_id).Sum(s => s.numOfUnits),
                        SalesCustomersLast = salesLast.Where(s => s.cprod_id == p.cprod_id).GroupBy(elem => elem.customer_code).ToDictionary(c => c.Key),
                        ReturnValueLast = returnProductsCustomersLast.Where(r => r.cprod_id == p.cprod_id).Sum(r => r.Value),
                        ReturnCustomersLast = returnProductsCustomersLast.Where(r => r.cprod_id == p.cprod_id),
                        ReturnReasonsLast = returnProductsReasonsLast.Where(r => r.cprod_id == p.cprod_id)
                    }).ToList();
                    //var productsPreviousNotInLast = Model.ProductSalesPrevious.Where(s => products.Count(p => p.cprod_id == s.cprod_id) == 0).Select(s => s.cprod_id);
                    //foreach (var prod in productsPreviousNotInLast)
                    //{
                    //    products.AddRange(Model.ProductSalesLast.GroupBy(s =>
                    //        new
                    //        {
                    //            s.cprod_id,
                    //            s.cprod_code,
                    //            s.cprod_name
                    //        }).Select(g => new
                    //        {
                    //            g.Key.cprod_id,
                    //            g.Key.cprod_code,
                    //            g.Key.cprod_name,
                    //            SalesValueLast = g.Sum(s => s.Amount),
                    //            SalesUnitsLast = g.Sum(s => s.numOfUnits),
                    //            SalesCustomers = g.GroupBy(elem => elem.customer_code).ToDictionary(c => c.Key),
                    //            ReturnValue = returnProductsCustomers.Where(r => r.cprod_id == g.Key.cprod_id).Sum(r => r.Value),
                    //            ReturnCustomers = returnProductsCustomers.Where(r => r.cprod_id == g.Key.cprod_id),
                    //            ReturnReasons = returnProductsReasons.Where(r => r.cprod_id == g.Key.cprod_id)
                    //        }));
                    //}


                    var sumSalesUnits = 0;
                    var shippedValue = 0.0;
                    var claimedUnits = 0;
                    var claimedValue = 0.0;
                    var counter = 0;
                    var numOfProductsWithNoClaims = 0;
                    var sumSalesUnitsNoClaims = 0;
                    var sumSalesValueNoClaims = 0.0;
                    
                    
                    
                    foreach (var prod in productsTotals.Where(p => p.SalesUnitsLast >= 100 && (p.ReturnValueLast/p.SalesValueLast*100) >= Model.LowThresholdPercent).OrderByDescending(prod => prod.ReturnValueLast / prod.SalesValueLast))
                    {
                        sumSalesUnits += prod.SalesUnitsLast;
                        shippedValue += prod.SalesValueLast;
                        var claimed = prod.ReturnCustomersLast.Sum(r => r.Qty);
                        if (claimed > 0)
                        {
                            claimedUnits += (claimed ?? 0);
                            claimedValue += (prod.ReturnValueLast ?? 0);
                            <tr @Html.Raw(counter++ % 2 == 0 ? "class=altrow" : "")>
                                @*<td>@prod.cprod_id</td>*@
                                <td>@prod.cprod_code</td>
                                <td><a href="@Url.Action("BrandClaimsAnalysisProductDetails", new {prod.cprod_id, statsKey = Settings.Default.StatsKey, from = Model.Periods.LastPeriodEnd, Model.CountryFilter})" target="_blank">@prod.cprod_name</a></td>
                                <td class="number">@prod.SalesUnitsLast</td>
                                @for (int i = 0; i < customersSalesLastCount; i++)
                                {
                                    var c = customersSalesLast[i];
                                    <td class="number">@(prod.SalesCustomersLast.ContainsKey(c) ? prod.SalesCustomersLast[c].Sum(s => s.numOfUnits).ToString() : "")</td>
                                }
                                <td class="number">@prod.SalesValueLast.ToString("N0")</td>
                                <td class="number">@claimed</td>
                                @for (int i = 0; i < customersReturnsLastCount; i++)
                                {
                                    <td class="number">@prod.ReturnCustomersLast.Where(r => r.customer_code == customersReturnsLast[i]).Sum(r => r.Qty)</td>
                                }
                                @for (int i = 0; i < reasonsReturnsLastCount; i++)
                                {
                                    <td class="number">@prod.ReturnReasonsLast.Where(re => re.reason == reasonsReturnsLast[i]).Sum(re => re.Qty)</td>
                                }
                                <td class="number">@prod.ReturnValueLast.ToString("N0")</td>
                                <td class="number">@(prod.SalesValueLast > 0 ? (prod.ReturnValueLast / prod.SalesValueLast).ToString("P1") : prod.ReturnValueLast > 0 ? "100%" : "")</td>
                                <td class="number">@(prod.SalesUnitsLast > 0 ? (claimed * 1.0 / prod.SalesUnitsLast).ToString("P1") : prod.SalesUnitsLast > 0 ? "100%" : "")</td>
                                <td class="number">@(Model.WeeksForClaimsSalesRatio[brand.brand_id].ContainsKey(prod.cprod_id) ? Model.WeeksForClaimsSalesRatio[brand.brand_id][prod.cprod_id] : 0)</td>
                            </tr>
                        }
                        else
                        {
                            numOfProductsWithNoClaims++;
                            sumSalesUnitsNoClaims += prod.SalesUnitsLast;
                            sumSalesValueNoClaims += prod.SalesValueLast;
                        }

                    }
                    <tr>
                        <td colspan="@(4 + customersSalesLastCount + 1 + customersReturnsLastCount + reasonsReturnsLastCount + 4)"></td>
                    </tr>
            var productTotalsBelowThreshold = productsTotals.Where(p => p.SalesUnitsLast >= 100 && p.ReturnCustomersLast.Sum(r => r.Qty) > 0 && (p.ReturnValueLast / p.SalesValueLast * 100) < Model.LowThresholdPercent).ToList();
                    
                    
                    var totalSalesValue = productTotalsBelowThreshold.Sum(p => p.SalesValueLast);
                    var totalReturnValue = productTotalsBelowThreshold.Sum(p => p.ReturnValueLast);
                    var totalReturnUnits = productTotalsBelowThreshold.Sum(p => p.ReturnCustomersLast.Sum(r => r.Qty));
                    var totalSalesUnits = productTotalsBelowThreshold.Sum(p => p.SalesUnitsLast);
                    <tr>
                        <td></td>
                        <td >
                            Products with less than @Model.LowThresholdPercent %claims/sales units
                        </td>
                        <td class="number">@totalSalesUnits</td>
                        @for (int i = 0; i < customersSalesLastCount; i++)
                        {
                            var c = customersSalesLast[i];
                            <td class="number">@(productTotalsBelowThreshold.Where(prod => prod.SalesCustomersLast.ContainsKey(c)).Sum(prod => prod.SalesCustomersLast[c].Sum(s => s.numOfUnits)))</td>
                        }
                        
                        <td class="number">@(totalSalesValue.ToString("N0"))</td>
                        <td class="number">@(totalReturnUnits.ToString("N0"))</td>
                        @for (int i = 0; i < customersReturnsLastCount; i++)
                        {
                            <td class="number">@productTotalsBelowThreshold.Sum(p=>p.ReturnCustomersLast.Where(r => r.customer_code == customersReturnsLast[i]).Sum(r => r.Qty))</td>
                        }
                        @for (int i = 0; i < reasonsReturnsLastCount; i++)
                        {
                            <td class="number">@productTotalsBelowThreshold.Sum(p=>p.ReturnReasonsLast.Where(re => re.reason == reasonsReturnsLast[i]).Sum(re => re.Qty))</td>
                        }
                        <td class="number">@productTotalsBelowThreshold.Sum(p=>p.ReturnValueLast).ToString("N0")</td>
                        <td class="number">@(totalSalesValue > 0 ? (totalReturnValue / totalSalesValue).ToString("P1") : totalReturnValue > 0 ? "100%" : "")</td>
                        <td class="number">@(totalSalesUnits > 0 ? (totalReturnUnits * 1.0 / totalSalesUnits).ToString("P1") : totalSalesUnits > 0 ? "100%" : "")</td>
                        <td class="number">0</td>        
                    </tr>
                    <tr>
                        <td colspan="2" style="font-weight: bold">
                            Products with less than 100 units shipped in last 6 months
                        </td>
                        <td colspan="@(2 + customersSalesLastCount)"></td>
                        <td colspan="@(1 + customersReturnsLastCount + reasonsReturnsLastCount + 1)"></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                    



            foreach (var prod in productsTotals.Where(p => p.SalesUnitsLast < 100 && (p.ReturnValueLast / p.SalesValueLast * 100) >= Model.LowThresholdPercent).OrderByDescending(prod => prod.ReturnValueLast / prod.SalesValueLast))
            {
                sumSalesUnits += prod.SalesUnitsLast;
                shippedValue += prod.SalesValueLast;
                var claimed = prod.ReturnCustomersLast.Sum(r => r.Qty);
                claimedUnits += (claimed ?? 0);
                if (claimed > 0)
                {
                    claimedValue += (prod.ReturnValueLast ?? 0);
                    <tr @Html.Raw(counter++ % 2 == 0 ? "class=altrow" : "")>
                        @*<td>@prod.cprod_id</td>*@
                        <td>@prod.cprod_code</td>
                        <td><a href="@Url.Action("BrandClaimsAnalysisProductDetails",new {prod.cprod_id, statsKey=Settings.Default.StatsKey,from = Model.Periods.LastPeriodEnd,Model.CountryFilter})" target="_blank">@prod.cprod_name</a></td>
                        <td class="number">@prod.SalesUnitsLast</td>
                        @for (int i = 0; i < customersSalesLastCount; i++)
                        {
                            var c = customersSalesLast[i];
                            <td class="number">@(prod.SalesCustomersLast.ContainsKey(c) ? prod.SalesCustomersLast[c].Sum(s => s.numOfUnits).ToString() : "")</td>
                        }
                        <td class="number">@prod.SalesValueLast.ToString("N0")</td>
                        <td class="number">@claimed</td>
                        @for (int i = 0; i < customersReturnsLastCount; i++)
                        {
                            <td class="number">@prod.ReturnCustomersLast.Where(r => r.customer_code == customersReturnsLast[i]).Sum(r => r.Qty)</td>
                        }
                        @for (int i = 0; i < reasonsReturnsLastCount; i++)
                        {
                            <td class="number">@prod.ReturnReasonsLast.Where(re => re.reason == reasonsReturnsLast[i]).Sum(re => re.Qty)</td>
                        }
                        <td class="number">@prod.ReturnValueLast.ToString("N0")</td>
                        <td class="number">@(prod.SalesValueLast > 0 ? (prod.ReturnValueLast / prod.SalesValueLast).ToString("P1") : prod.ReturnValueLast > 0 ? "100%" : "")</td>
                        <td class="number">@(prod.SalesUnitsLast > 0 ? (claimed * 1.0 / prod.SalesUnitsLast).ToString("P1") : prod.SalesUnitsLast > 0 ? "100%" : "")</td>
                        <td class="number">@(Model.WeeksForClaimsSalesRatio[brand.brand_id].ContainsKey(prod.cprod_id) ? Model.WeeksForClaimsSalesRatio[brand.brand_id][prod.cprod_id] : 0)</td>
                    </tr>
                }
                else
                {
                    numOfProductsWithNoClaims++;
                    sumSalesUnitsNoClaims += prod.SalesUnitsLast;
                    sumSalesValueNoClaims += prod.SalesValueLast;
                }


            }

            <tr>
                <td colspan="@(4 + customersSalesLastCount + 1 + customersReturnsLastCount + reasonsReturnsLastCount + 4)"></td>
            </tr>
            productTotalsBelowThreshold = productsTotals.Where(p => p.SalesUnitsLast < 100 && p.ReturnCustomersLast.Sum(r => r.Qty) > 0 && (p.ReturnValueLast / p.SalesValueLast * 100) < Model.LowThresholdPercent).ToList();


            totalSalesValue = productTotalsBelowThreshold.Sum(p => p.SalesValueLast);
            totalReturnValue = productTotalsBelowThreshold.Sum(p => p.ReturnValueLast);
            totalReturnUnits = productTotalsBelowThreshold.Sum(p => p.ReturnCustomersLast.Sum(r => r.Qty));
            totalSalesUnits = productTotalsBelowThreshold.Sum(p => p.SalesUnitsLast);
            <tr>
                <td></td>
                <td>
                    Products with less than @Model.LowThresholdPercent %claims/sales units
                </td>
                <td class="number">@totalSalesUnits</td>
                @for (int i = 0; i < customersSalesLastCount; i++)
                {
                    var c = customersSalesLast[i];
                    <td class="number">@(productTotalsBelowThreshold.Where(prod => prod.SalesCustomersLast.ContainsKey(c)).Sum(prod => prod.SalesCustomersLast[c].Sum(s => s.numOfUnits)))</td>
                }

                <td class="number">@(totalSalesValue.ToString("N0"))</td>
                <td class="number">@(totalReturnUnits.ToString("N0"))</td>
                @for (int i = 0; i < customersReturnsLastCount; i++)
                {
                    <td class="number">@productTotalsBelowThreshold.Sum(p => p.ReturnCustomersLast.Where(r => r.customer_code == customersReturnsLast[i]).Sum(r => r.Qty))</td>
                }
                @for (int i = 0; i < reasonsReturnsLastCount; i++)
                {
                    <td class="number">@productTotalsBelowThreshold.Sum(p => p.ReturnReasonsLast.Where(re => re.reason == reasonsReturnsLast[i]).Sum(re => re.Qty))</td>
                }
                <td class="number">@productTotalsBelowThreshold.Sum(p => p.ReturnValueLast).ToString("N0")</td>
                <td class="number">@(totalSalesValue > 0 ? (totalReturnValue / totalSalesValue).ToString("P1") : totalReturnValue > 0 ? "100%" : "")</td>
                <td class="number">@(totalSalesUnits > 0 ? (totalReturnUnits * 1.0 / totalSalesUnits).ToString("P1") : totalSalesUnits > 0 ? "100%" : "")</td>
                <td class="number">0</td>
            </tr>

            <tr>
                <td colspan="2">Products with no claims (@numOfProductsWithNoClaims)</td>
                <td class="number">@sumSalesUnitsNoClaims</td>
                @if (customersSalesLastCount > 0)
                {
                    <td colspan="@customersSalesLastCount"></td>
                }
                <td class="number">@sumSalesValueNoClaims.ToString("N1")</td>
                <td class="number">0</td>
                @if (customersReturnsLastCount > 0)
                {
                    <td colspan="@customersReturnsLastCount"></td>
                }
                @if (reasonsReturnsLastCount > 0)
                {
                    <td colspan="@reasonsReturnsLastCount"></td>
                }
                <td class="number">0</td>
                <td></td>
                <td></td>
                <td></td>
            </tr>


                    <tr style="font-weight: bold">
                        <td colspan="2"></td>
                        <td class="number">@sumSalesUnits</td>
                        @if (customersSalesLastCount > 0)
                        {
                            <td colspan="@customersSalesLastCount"></td>
                        }
                        <td class="number">@shippedValue.ToString("N1")</td>
                        <td class="number">@claimedUnits</td>
                        @if (customersReturnsLastCount > 0)
                        {
                            <td colspan="@customersReturnsLastCount"></td>
                        }
                        @if (reasonsReturnsLastCount > 0)
                        {
                            <td colspan="@reasonsReturnsLastCount"></td>
                        }
                        <td class="number">@claimedValue.ToString("N1")</td>
                        <td class="number">@((returns.Sum(r => r.TotalValue) / salesLast.Sum(s => s.Amount)).ToString("P1"))</td>
                        <td class="number">@((returns.Sum(r => r.return_qty) * 1.0 / salesLast.Sum(s => s.numOfUnits)).ToString("P1"))</td>
                        <td></td>
                    </tr>
                }
            </table>
        }
    </body>
</html>